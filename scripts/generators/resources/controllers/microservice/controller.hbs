import { Controller, HttpStatus } from '@nestjs/common';
import { MessagePattern, Payload, RpcException } from '@nestjs/microservices';
import { {{className}}Repository, type Filter } from 'src/app/{{fileName}}/repositories';
import { {{className}}Service } from 'src/app/{{fileName}}/services';
import { PaginationQueryDto } from 'src/common/dtos/pagination-query.dto';
import { ResponseEntity } from 'src/common/entities/response.entity';
import { Create{{className}}Dto, Update{{className}}Dto } from 'src/app/{{fileName}}/dtos';
import { map, catchError } from 'rxjs/operators';
import { ApiTags } from '@nestjs/swagger';

@ApiTags('{{className}}')
@Controller({
  path: '{{variableName}}',
  version: '1',
})
export class {{className}}MicroserviceController {
  constructor(
    private readonly {{variableName}}Service: {{className}}Service,
    private readonly {{variableName}}Repository: {{className}}Repository,
  ) {}

  @MessagePattern('{{variableName}}.create')
  public create(@Payload() create{{className}}Dto: Create{{className}}Dto) {
    return from(this.{{variableName}}Service.create(create{{className}}Dto)).pipe(
      map(data => new ResponseEntity({
        data,
        message: 'success',
      })),
      catchError(error => { 
        throw new RpcException(new ResponseEntity({
          status: HttpStatus.BAD_REQUEST,
          message: error.message
        }));
      }),
    );
  }

  @MessagePattern('{{variableName}}.find')
  public find(@Payload() filter: Omit<Filter, 'include'>): Observable<Prisma.{{modelName}}[]> {
    return from(this.{{variableName}}Repository.find(filter)).pipe(
      catchError(error => {
        throw new RpcException(new ResponseEntity({
          status: HttpStatus.BAD_REQUEST,
          message: error.message
        }));
      }),
    );
  }

  @MessagePattern('{{variableName}}.paginate')
  public index(@Payload() paginateDto: PaginationQueryDto) {
    return from(this.{{variableName}}Service.paginate(paginateDto)).pipe(
      map(data => new ResponseEntity({
        data,
        message: 'success',
      })),
      catchError(error => {
        throw new RpcException(new ResponseEntity({
          status: HttpStatus.BAD_REQUEST,
          message: error.message
        }));
      }),
    );
  }

  @MessagePattern('{{variableName}}.detail')
  public detail(@Payload('id') id: string) {
    return from(this.{{variableName}}Service.detail(id)).pipe(
      map(data => new ResponseEntity({
        data,
        message: 'success',
      })),
      catchError(error => {
        throw new RpcException(new ResponseEntity({
          status: HttpStatus.BAD_REQUEST,
          message: error.message
        }));
      }),
    );
  }

  @MessagePattern('{{variableName}}.destroy')
  public destroy(@Payload('id') id: string) {
    return from(this.{{variableName}}Service.destroy(id)).pipe(
      map(data => new ResponseEntity({
        data,
        message: 'success',
      })),
      catchError(error => {
        throw new RpcException(new ResponseEntity({
          status: HttpStatus.BAD_REQUEST,
          message: error.message
        }));
      }),
    );
  }

  @MessagePattern(':id')
  public update(
    @Payload('id') id: string,
    @Payload() update{{className}}Dto: Update{{className}}Dto,
  ) {
    return from(this.{{variableName}}Service.update(id, update{{className}}Dto)).pipe(
      map(data => new ResponseEntity({
        data,
        message: 'success',
      })),
      catchError(error => {
        throw new RpcException(new ResponseEntity({
          status: HttpStatus.BAD_REQUEST,
          message: error.message
        }));
      }),
    );
  }
}

